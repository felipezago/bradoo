=============================== Description =============================== 

The API has two main urls: http://127.0.0.1:8000/vendors and http://127.0.0.1:8000/products
By that, its possible to create, read, update and delete the products and vendors.

The API Documentation its available from the link http://127.0.0.1:8000.

At the home page its shown the two URLs cited above. When accessing the vendors page, its possible to see all the vendors registered, and below you can register a new one on a form below. 
The JSON of the vendors has this form:

{
    "count": null,       <
    "next": null,        <  Fields refering to Pagination, which I defined 15 itens per page.
    "previous": null,    <
    "results": [
        {
            "id": null,
            "name": "",
            "cnpj": "",
            "city": "",
            "products": [
                {
                    "id": null,
                    "name": "",
                    "code": "",
                    "price": null,
                    "vendor": null
                },                
            ]
        },
}

When accessing the products page, it is also possible to see all the products registered, and you can register a new one on a form below.
The JSON of the products has this form:

{
    "count": null,        <
    "next": null,         <  Fields refering to Pagination, which I defined 15 itens per page.
    "previous": null,     <
    "results": [
	{
	    "id": null,
    	    "name": "",
	    "code": "",
	    "price": null,
	    "vendor": null
	},
}


=============================== Instructions =============================== 

To run this project, the first thing you have to do, its to install the dependencies in your environment through the "requirements.txt" file, using the following command:

pip install -r requirements.txt

That being done, you have to modify the user and password of the postgres database, on the following files:

vendors_catalogue/setting.py
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'username', <<
        'PASSWORD': 'pass', <<
        'HOST': 'database',
        'PORT': 5432,
    }
}

docker-compose.yml
environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pass

Then, you might have to make and execute the migrations. For that you will have to execute these commands:

docker-compose run web python manage.py makemigrations
docker-compose run web python manage.py migrate

After that, you can already run the local server, executing the following command:

docker-compose up

It's noteworthy that the IDE I used to develop this project, was PyCharm.


======================================= Tests =========================================

To test the resources, I created a postman collection, with the following requests:

Method | Function		    | URL

GET    | Get all 		    |  http://127.0.0.1:8000/vendors	
GET    | Get by combination	    |  http://127.0.0.1:8000/vendors?id={}&name={}&cnpj={}&city={} (Works with any combination)		
POST   | Insert                    |  http://127.0.0.1:8000/vendors (Insert by raw JSON data)	
DELETE | Delete	            |  http://127.0.0.1:8000/vendors/{id} 	
PATCH  | Update                    |  http://12127.0.0.17:8000/vendors/{id} (Updated by raw JSON data)	

-------------------------------------------------------------------------------------------------------------

Method | Function		    | URL

GET    | Get all 		    |  http://127.0.0.1:8000/products
GET    | Get by combination	    |  http://127.0.0.1:8000/products?id={}&name={}&code={}&price={}&vendors={vendors ID} (Works with any combination)		
POST   | Insert                    |  http://127.0.0.1:8000/products (Inserted by raw JSON data)	
DELETE | Delete	            |  http://127.0.0.1:8000/products/{id} 	
PATCH  | Update                    |  http://127.0.0.1:8000/products/{id} (Updated by raw JSON data)	

The collection can be found at the Github project with the name of "collection.json".


=============================== Work Environment =============================== 

Computer: Notebook Dell Inspiron, Intel I7, 16GB RAM, 1TB SSD + 500GB HDD
Operating System: Linux Ubuntu 20.04
IDE: Pycharm Community Edition
Libraries: 
- Django as ORM, 
- Django Rest Framework to create the REST API,
- Django Filter to help making the filters for GET Method,
- Docker to create the containers, 
- Docker-compose to run the container on my environment,
- localflavor to help manage the CNPJ field
- and psycopg2, to manage the PostgreSQL database connection

